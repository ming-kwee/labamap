
// Generated by Akka gRPC. DO NOT EDIT.
package user.action;

import akka.actor.ClassicActorSystemProvider;
import akka.stream.Materializer;
import akka.stream.SystemMaterializer;

import akka.grpc.internal.*;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;

import io.grpc.MethodDescriptor;

import static user.action.UserStateSubscription.Serializers.*;

import scala.concurrent.ExecutionContext;

import akka.grpc.AkkaGrpcGenerated;


import akka.grpc.javadsl.SingleResponseRequestBuilder;


@AkkaGrpcGenerated
public abstract class UserStateSubscriptionClient extends UserStateSubscriptionClientPowerApi implements UserStateSubscription, AkkaGrpcClient {
  public static final UserStateSubscriptionClient create(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
    return new DefaultUserStateSubscriptionClient(settings, sys);
  }

  @AkkaGrpcGenerated
  protected final static class DefaultUserStateSubscriptionClient extends UserStateSubscriptionClient {

      private final ClientState clientState;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private DefaultUserStateSubscriptionClient(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
        this.settings = settings;
        this.mat = SystemMaterializer.get(sys).materializer();
        this.ec = sys.classicSystem().dispatcher();
        this.clientState = new ClientState(
          settings,
          akka.event.Logging$.MODULE$.apply(sys.classicSystem(), DefaultUserStateSubscriptionClient.class, akka.event.LogSource$.MODULE$.<DefaultUserStateSubscriptionClient>fromAnyClass()),
          sys);
        this.options = NettyClientUtils.callOptions(settings);

        sys.classicSystem().getWhenTerminated().whenComplete((v, e) -> close());
      }

  
    
      private final SingleResponseRequestBuilder<user.domain.UserDomain.UserState, user.api.UserApi.User> onStateChangeRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(onStateChangeDescriptor, channel, options, settings, ec);
      }
    
  

      

        /**
         * For access to method metadata use the parameterless version of onStateChange
         */
        public java.util.concurrent.CompletionStage<user.api.UserApi.User> onStateChange(user.domain.UserDomain.UserState request) {
          return onStateChange().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer onStateChange(user.domain.UserDomain.UserState) if possible.
         */
        
          public SingleResponseRequestBuilder<user.domain.UserDomain.UserState, user.api.UserApi.User> onStateChange()
        
        {
          return onStateChangeRequestBuilder(clientState.internalChannel());
        }
      

      
        private static MethodDescriptor<user.domain.UserDomain.UserState, user.api.UserApi.User> onStateChangeDescriptor =
          MethodDescriptor.<user.domain.UserDomain.UserState, user.api.UserApi.User>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("user.action.UserStateSubscription", "OnStateChange"))
            .setRequestMarshaller(new ProtoMarshaller<user.domain.UserDomain.UserState>(UserStateSerializer))
            .setResponseMarshaller(new ProtoMarshaller<user.api.UserApi.User>(UserSerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        return clientState.closeCS() ;
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return clientState.closedCS();
      }
  }

}



