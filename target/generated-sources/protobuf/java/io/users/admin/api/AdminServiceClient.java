
// Generated by Akka gRPC. DO NOT EDIT.
package io.users.admin.api;

import akka.actor.ClassicActorSystemProvider;
import akka.stream.Materializer;
import akka.stream.SystemMaterializer;

import akka.grpc.internal.*;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;

import io.grpc.MethodDescriptor;

import static io.users.admin.api.AdminService.Serializers.*;

import scala.concurrent.ExecutionContext;

import akka.grpc.AkkaGrpcGenerated;


import akka.grpc.javadsl.SingleResponseRequestBuilder;


@AkkaGrpcGenerated
public abstract class AdminServiceClient extends AdminServiceClientPowerApi implements AdminService, AkkaGrpcClient {
  public static final AdminServiceClient create(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
    return new DefaultAdminServiceClient(settings, sys);
  }

  @AkkaGrpcGenerated
  protected final static class DefaultAdminServiceClient extends AdminServiceClient {

      private final ClientState clientState;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private DefaultAdminServiceClient(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
        this.settings = settings;
        this.mat = SystemMaterializer.get(sys).materializer();
        this.ec = sys.classicSystem().dispatcher();
        this.clientState = new ClientState(
          settings,
          akka.event.Logging$.MODULE$.apply(sys.classicSystem(), DefaultAdminServiceClient.class, akka.event.LogSource$.MODULE$.<DefaultAdminServiceClient>fromAnyClass()),
          sys);
        this.options = NettyClientUtils.callOptions(settings);

        sys.classicSystem().getWhenTerminated().whenComplete((v, e) -> close());
      }

  
    
      private final SingleResponseRequestBuilder<io.users.admin.api.AdminApi.Admin, com.google.protobuf.Empty> createAdminRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(createAdminDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<io.users.admin.api.AdminApi.GetAdminRequest, io.users.admin.api.AdminApi.Admin> getAdminRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(getAdminDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<io.users.admin.api.AdminApi.Admin, com.google.protobuf.Empty> updateAdminRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(updateAdminDescriptor, channel, options, settings, ec);
      }
    
  

      

        /**
         * For access to method metadata use the parameterless version of createAdmin
         */
        public java.util.concurrent.CompletionStage<com.google.protobuf.Empty> createAdmin(io.users.admin.api.AdminApi.Admin request) {
          return createAdmin().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer createAdmin(io.users.admin.api.AdminApi.Admin) if possible.
         */
        
          public SingleResponseRequestBuilder<io.users.admin.api.AdminApi.Admin, com.google.protobuf.Empty> createAdmin()
        
        {
          return createAdminRequestBuilder(clientState.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of getAdmin
         */
        public java.util.concurrent.CompletionStage<io.users.admin.api.AdminApi.Admin> getAdmin(io.users.admin.api.AdminApi.GetAdminRequest request) {
          return getAdmin().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer getAdmin(io.users.admin.api.AdminApi.GetAdminRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<io.users.admin.api.AdminApi.GetAdminRequest, io.users.admin.api.AdminApi.Admin> getAdmin()
        
        {
          return getAdminRequestBuilder(clientState.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of updateAdmin
         */
        public java.util.concurrent.CompletionStage<com.google.protobuf.Empty> updateAdmin(io.users.admin.api.AdminApi.Admin request) {
          return updateAdmin().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer updateAdmin(io.users.admin.api.AdminApi.Admin) if possible.
         */
        
          public SingleResponseRequestBuilder<io.users.admin.api.AdminApi.Admin, com.google.protobuf.Empty> updateAdmin()
        
        {
          return updateAdminRequestBuilder(clientState.internalChannel());
        }
      

      
        private static MethodDescriptor<io.users.admin.api.AdminApi.Admin, com.google.protobuf.Empty> createAdminDescriptor =
          MethodDescriptor.<io.users.admin.api.AdminApi.Admin, com.google.protobuf.Empty>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("io.users.admin.api.AdminService", "CreateAdmin"))
            .setRequestMarshaller(new ProtoMarshaller<io.users.admin.api.AdminApi.Admin>(AdminSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.protobuf.Empty>(EmptySerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<io.users.admin.api.AdminApi.GetAdminRequest, io.users.admin.api.AdminApi.Admin> getAdminDescriptor =
          MethodDescriptor.<io.users.admin.api.AdminApi.GetAdminRequest, io.users.admin.api.AdminApi.Admin>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("io.users.admin.api.AdminService", "GetAdmin"))
            .setRequestMarshaller(new ProtoMarshaller<io.users.admin.api.AdminApi.GetAdminRequest>(GetAdminRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<io.users.admin.api.AdminApi.Admin>(AdminSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<io.users.admin.api.AdminApi.Admin, com.google.protobuf.Empty> updateAdminDescriptor =
          MethodDescriptor.<io.users.admin.api.AdminApi.Admin, com.google.protobuf.Empty>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("io.users.admin.api.AdminService", "UpdateAdmin"))
            .setRequestMarshaller(new ProtoMarshaller<io.users.admin.api.AdminApi.Admin>(AdminSerializer))
            .setResponseMarshaller(new ProtoMarshaller<com.google.protobuf.Empty>(EmptySerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        return clientState.closeCS() ;
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return clientState.closedCS();
      }
  }

}



