syntax = "proto3";

package io.products.credential.view;
option java_outer_classname = "CredentialViewByChannelIdAndUserIdModel";

import "io/products/credential/domain/credential_domain.proto";
import "google/api/annotations.proto";
import "kalix/annotations.proto";
import "google/protobuf/empty.proto";

service CredentialByChannelIdAndUserIdView {
  option (kalix.codegen) = {
    view: {}
  };

  
  rpc GetCredentialByChannelIdAndUserId(GetCredentialByChannelIdAndUserIdRequest) returns (CredentialByChannelIdAndUserIdResponse) {
    option (kalix.method).view.query = {
      query: "SELECT * AS credentials FROM credentials WHERE channelId = :channelId AND userId = :userId"
    };
    option (google.api.http) = {
      post: "/credential-by-channel-and-user",
      body: "*"
    };
  }

  rpc UpdateCredential(domain.CredentialState) returns (domain.CredentialState) {
    option (kalix.method).eventing.in = {
      value_entity: "credentials"
    };
    option (kalix.method).view.update = {
      table: "credentials"
      // transform_updates: true
    };
  }

}

message GetCredentialByChannelIdAndUserIdRequest {
  string channelId = 1;
  string userId = 2;
}

message CredentialByChannelIdAndUserIdResponse {
  repeated domain.CredentialState credentials = 1;
}

